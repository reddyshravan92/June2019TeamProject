Authentication And Authorization In ASP.NET Core MVC Using Cookie

Authentication is the process to validate an anonymous user based on some credentials and Authorization process happens just after that and grants resources to this validated user. So, we can say, it's two-step validating process before providing the access of the resources or data.

We have many techniques to validate the users, like Windows Authentication, JWT Authentication, and Cookie Authentication etc. 

Let us talk about Cookie based Authentication:
(Kind of Forms authentication)


Create a asp.net core MVC application:

Step 1: 
services.AddAuthentication(CookieAuthenticationDefaults.AuthenticationScheme).AddCookie();  



step 2:
app.UseAuthentication();  


e.g.
using Microsoft.AspNetCore.Authentication.Cookies;  
using Microsoft.AspNetCore.Builder;  
using Microsoft.AspNetCore.Hosting;  
using Microsoft.AspNetCore.Http;  
using Microsoft.AspNetCore.Mvc;  
using Microsoft.Extensions.Configuration;  
using Microsoft.Extensions.DependencyInjection;  
  
namespace CookieDemo  
{  
    public class Startup  
    {  
        public Startup(IConfiguration configuration)  aa
        {  
            Configuration = configuration;  
        }  
  
        public IConfiguration Configuration { get; }  
  
        // This method gets called by the runtime. Use this method to add services to the container.  
        public void ConfigureServices(IServiceCollection services)  
        {  
            services.Configure<CookiePolicyOptions>(options =>  
            {  
                // This lambda determines whether user consent for non-essential cookies is needed for a given request.  
                options.CheckConsentNeeded = context => true;  
                options.MinimumSameSitePolicy = SameSiteMode.None;  
            });  
  
            services.AddAuthentication(CookieAuthenticationDefaults.AuthenticationScheme).AddCookie();  
            services.AddMvc().SetCompatibilityVersion(CompatibilityVersion.Version_2_1);  
        }  
  
        // This method gets called by the runtime. Use this method to configure the HTTP request pipeline.  
        public void Configure(IApplicationBuilder app, IHostingEnvironment env)  
        {  
            if (env.IsDevelopment())  
            {  
                app.UseDeveloperExceptionPage();  
            }  
            else  
            {  
                app.UseExceptionHandler("/Home/Error");  
            }  
  
            app.UseStaticFiles();  
            app.UseCookiePolicy();  
            app.UseAuthentication();  
            app.UseMvc(routes =>  
            {  
                routes.MapRoute(  
                    name: "default",  
                    template: "{controller=Home}/{action=Index}/{id?}");  
            });  
        }  
    }  
}  




e.g.
using System;  
using System.Collections.Generic;  
using System.Linq;  
using System.Security.Claims;  
using System.Threading.Tasks;  
using Microsoft.AspNetCore.Authentication;  
using Microsoft.AspNetCore.Authentication.Cookies;  
using Microsoft.AspNetCore.Mvc;  
  
namespace CookieDemo.Controllers  
{  
    public class AccountController : Controller  
    {  
        public IActionResult Login()  
        {  
            return View();  
        }  
  
        [HttpPost]  
        public IActionResult Login(string userName, string password)  
        {  
            if(!string.IsNullOrEmpty(userName) && string.IsNullOrEmpty(password))  
            {  
                return RedirectToAction("Login");  
            }  
  
            //Check the user name and password  
            //Here can be implemented checking logic from the database  
  
            if(userName=="Admin" && password == "password"){  
  
                //Create the identity for the user  
                var identity = new ClaimsIdentity(new[] {  
                    new Claim(ClaimTypes.Name, userName)  
                }, CookieAuthenticationDefaults.AuthenticationScheme);  
  
                var principal = new ClaimsPrincipal(identity);  
  
                var login = HttpContext.SignInAsync(CookieAuthenticationDefaults.AuthenticationScheme, principal);  
  
                return RedirectToAction("Index", "Home");  
            }  
  
            return View();  
        }  
    }  
}  




@{  
    ViewData["Title"] = "Login";  
}  
  
<div class="container">  
    <div class="row">          
        <div class="col-md-3">  
            <h2><strong>Login Page </strong></h2><br />  
            <form asp-action="login" method="post">  
                <div class="form-group">  
                    <label>User Name</label>  
                    <input type="text" class="form-control" id="userName" name="userName" placeholder="Enter user name">  
                </div>  
                <div class="form-group">  
                    <label>Password</label>  
                    <input type="password" class="form-control" name="password" id="password" placeholder="Password">  
                </div>  
                <div class="form-check">  
                    <button class="btn btn-info" type="reset">Reset</button>  
                    <button type="submit" class="btn btn-primary">Submit</button>  
                </div>  
            </form>  
        </div>  
    </div>  
</div>  



using CookieDemo.Models;  
using Microsoft.AspNetCore.Authorization;  
using Microsoft.AspNetCore.Mvc;  
using System.Diagnostics;  
  
namespace CookieDemo.Controllers  
{  
  
    [Authorize]  
    public class HomeController : Controller  
    {          
        public IActionResult Index()  
        {  
            return View();  
        } 
    }
}




[HttpPost]  
public IActionResult Logout()  
{  
      var login = HttpContext.SignOutAsync(CookieAuthenticationDefaults.AuthenticationScheme);  
      return RedirectToAction("Login");  
}  



@{  
    ViewData["Title"] = "Home Page";  
}  
  
<div class="container">  
    <div class="row">  
        <div class="col-md-12">  
            <h2><strong>Home Page </strong></h2><br /><br />  
            Hello @User.Identity.Name  
            <a asp-action="logout" asp-controller="account">  
                Logout  
            </a>  
            <br />  
            <br />  
            <h4>Welcome to Asp.Net Core Authentication and Authorization Demo!!</h4>  
        </div>  
    </div>  
</div>  



Now, let's understand how to work with multiple roles. Here we are doing everything manually with some static value, but you can change the logic and connect to the database for validating the user. So, just modify the Login method as follows where we are providing two different kinds of roles; one is Admin role and another is User role. Based on these roles, we will provide access to some of the pages.



[HttpPost]  
public IActionResult Login(string userName, string password)  
{  
    if (!string.IsNullOrEmpty(userName) && string.IsNullOrEmpty(password))  
    {  
        return RedirectToAction("Login");  
    }  
  
    //Check the user name and password  
    //Here can be implemented checking logic from the database  
    ClaimsIdentity identity = null;  
    bool isAuthenticated = false;  
  
    if (userName == "Admin" && password == "password")  
    {  
  
        //Create the identity for the user  
        identity = new ClaimsIdentity(new[] {  
                    new Claim(ClaimTypes.Name, userName),  
                    new Claim(ClaimTypes.Role, "Admin")  
                }, CookieAuthenticationDefaults.AuthenticationScheme);  
  
        isAuthenticated = true;  
    }  
  
    if (userName == "Satya" && password == "password")  
    {  
        //Create the identity for the user  
        identity = new ClaimsIdentity(new[] {  
                    new Claim(ClaimTypes.Name, userName),  
                    new Claim(ClaimTypes.Role, "User")  
                }, CookieAuthenticationDefaults.AuthenticationScheme);  
  
        isAuthenticated = true;  
    }  
  
    if (isAuthenticated)  
    {  
        var principal = new ClaimsPrincipal(identity);  
  
        var login = HttpContext.SignInAsync(CookieAuthenticationDefaults.AuthenticationScheme, principal);  
  
        return RedirectToAction("Index", "Home");  
    }  
    return View();  
}  


Now let's move to HomeController and remove the [Authorize] attribute from the class level and put it in action level as follows.



  [Authorize(Roles ="Admin, User")]  
        public IActionResult Index()  
        {  
            return View();  
        }  
  
        [Authorize(Roles ="Admin")]  
        public IActionResult Setting()  
        {  
            return View();  
  
        }  


