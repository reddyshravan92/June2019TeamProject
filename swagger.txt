.NET Core Api with swagger / Open API:

When consuming a Web API, understanding its various methods can be challenging for a developer. 
Swagger, also known as OpenAPI, solves the problem of generating useful documentation and help pages for Web APIs.

You can do by using 2 different ways:
* Swashbuckle
* NSwag

Swashbuckle.AspNetCore is an open source project for generating Swagger documents for ASP.NET Core Web APIs.


Swagger specification (swagger.json)

The core to the Swagger flow is the Swagger specification—by default, a document named swagger.json

It's generated by the Swagger tool chain (or third-party implementations of it) based on your service.

It describes the capabilities of your API and how to access it with HTTP. 



Swagger UI:

Swagger UI offers a web-based UI that provides information about the service, using the generated Swagger specification.

Each public action method in your controllers can be tested from the UI. 


There are three main components to Swashbuckle:

Swashbuckle.AspNetCore.Swagger: a Swagger object model and middleware to expose SwaggerDocument objects as JSON endpoints.

Swashbuckle.AspNetCore.SwaggerGen: a Swagger generator that builds SwaggerDocument objects directly from your routes, controllers, and models. It's typically combined with the Swagger endpoint middleware to automatically expose Swagger JSON.

Swashbuckle.AspNetCore.SwaggerUI: an embedded version of the Swagger UI tool. It interprets Swagger JSON to build a rich, customizable experience for describing the web API functionality. It includes built-in test harnesses for the public methods.





Package installation
Swashbuckle.AspNetCore



Startup.cs
using Swashbuckle.AspNetCore.Swagger;
using System.Reflection;
using System.IO;


Configure Services:

Add the Swagger generator to the services collection in the Startup.ConfigureServices method:
 // Register the Swagger generator, defining 1 or more Swagger documents
            services.AddSwaggerGen(c =>
            {
                c.SwaggerDoc("v1", new Info
                {
                    Version = "v1",
                    Title = "Test API",
                    Description = "An API",
                    TermsOfService = "None"
                });           
            });
        }


Configure:
 // Enable middleware to serve generated Swagger as a JSON endpoint.
            app.UseSwagger();

            // Enable middleware to serve swagger-ui (HTML, JS, CSS, etc.),
            // specifying the Swagger JSON endpoint.
            app.UseSwaggerUI(c =>
            {
                c.SwaggerEndpoint("/swagger/v1/swagger.json", "My API V1");
            });


The Swagger UI can be found at http://localhost:<port>/swagger.

To serve the Swagger UI at the app's root (http://localhost:<port>/), set the RoutePrefix property to an empty string:
app.UseSwaggerUI(c =>
{
    c.SwaggerEndpoint("/swagger/v1/swagger.json", "My API V1");
    c.RoutePrefix = string.Empty;
});





Customize information:

// Register the Swagger generator, defining 1 or more Swagger documents
            services.AddSwaggerGen(c =>
            {
                c.SwaggerDoc("v1", new Info
                {
                    Version = "v1",
                    Title = "Test API",
                    Description = "An API for managing country sheet rules",
                    TermsOfService = "None",
                    Contact =new Contact()
                    {
                        Name = "Shayne Boyer",
                        Email = string.Empty,
                        Url = new Uri("https://twitter.com/spboyer").ToString(),
                    },
                    License = new License()
                    {
                        Name = "Use under LICX",
                        Url = new Uri("https://example.com/license").ToString(),
                    }
                });


XML comments (edit project file)(add these lines):

<PropertyGroup>
  <GenerateDocumentationFile>true</GenerateDocumentationFile>
  <NoWarn>$(NoWarn);1591</NoWarn>
</PropertyGroup>


startup.cs
  // Register the Swagger generator, defining 1 or more Swagger documents
            services.AddSwaggerGen(c =>
            {
                c.SwaggerDoc("v1", new Info
                {
                    Version = "v1",
                    Title = "Test API",
                    Description = "An API for managing country sheet rules",
                    TermsOfService = "None",
                    Contact =new Contact()
                    {
                        Name = "Shayne Boyer",
                        Email = string.Empty,
                        Url = new Uri("https://twitter.com/spboyer").ToString(),
                    },
                    License = new License()
                    {
                        Name = "Use under LICX",
                        Url = new Uri("https://example.com/license").ToString(),
                    }
                });

                // Set the comments path for the Swagger JSON and UI.
                var xmlFile = $"{Assembly.GetExecutingAssembly().GetName().Name}.xml";
                var xmlPath = Path.Combine(AppContext.BaseDirectory, xmlFile);
                c.IncludeXmlComments(xmlPath);
            });


To launch the swagger automatically:
Open properties of your proejct => Debug -> check Launch browser => swagger 

=============
API versioning:

Adding Versioning to your .Net Core Web API:


install 
Microsoft.AspNetCore.Mvc.Versioning.ApiExplorer


using Microsoft.AspNetCore.Mvc.Versioning;


public void ConfigureServices(IServiceCollection services)
{
    services.AddMvc();
  
 services.AddApiVersioning(options =>
            {
                options.ReportApiVersions = true;
                options.AssumeDefaultVersionWhenUnspecified = false;
                options.ApiVersionReader = new UrlSegmentApiVersionReader();
            });

            services.AddVersionedApiExplorer(options =>
            {
                options.GroupNameFormat = "'v'VVV";
                options.SubstituteApiVersionInUrl = true;
            });


}


As you can see I am adding API versioning into the request header with the header name = “api-version”.

Now in the API and controller side we can specify which controller will be handling which version, like the following:


    [ApiVersion("1")]
    [Route("api/v{version:apiVersion}/[controller]")]
    [ApiController]
    public class ValuesController : ControllerBase
    {
        /// <summary>
        /// This is an API for get Values
        /// </summary>
        /// <returns></returns>
        [HttpGet]
        public ActionResult<IEnumerable<string>> Get()
        {
            return new string[] { "value1", "value2" };
        }
  }

